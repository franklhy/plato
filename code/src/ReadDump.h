/******************************************************************************************************/
/***This code is used to read ONE SNAPSHOT EACH TIME from dump file generated by lammps dump command***/
/******************************************************************************************************/
/*** SPECIAL NOTE:                                                                                  ***/
/*** (1) This code is designed to read only ONE snapshot each time.                                 ***/
/*** (2) It is assumed that name and sequence of atom properties will not change in the dump file   ***/ 
/***     at different timesteps.                                                                    ***/
/******************************************************************************************************/
/***                                  HOW TO USE THIS CLASS                                         ***/
/*** To read a dump file generated by lammps dump command:                                          ***/
/***                                                                                                ***/
/*** (1) Claim an object of ReadDump class. The only parameter needed by constructor is the         ***/
/***     name of input file (string style).                                                         ***/
/***                                                                                                ***/
/*** (2) Call one of the following functions to read one snapshot of the file:                      ***/
/***     Read_Timestep(int Timestep, STEP& step_destin):                                            ***/
/***       read information of one snapshot by timestep, and write data into step_destin            ***/
/***     Read_Frame(int Frame, STEP& step_destin):                                                  ***/
/***       read information of one snapshot by index  (0 ~ (total number of snapshots - 1)), and    ***/
/***       write data into step_destin                                                              ***/
/***                                                                                                ***/
/*** (3) Call one of the following functions to get desired information:                            ***/
/***     GetProperties(vector<string>& Vector_destin):                                              ***/
/***       copy the name of available atom properties in the dump file to Vector_destin             ***/
/***     GetTimesteps(vector<int>& Vector_destin):                                                  ***/
/***       copy all the existing timestep in the input file to Vector_destin                        ***/
/***     PropertyMapping(int& Index_destin, const string& PropertyName, const STEP& cur_step):      ***/
/***       find the property whose name is PropertyName in cur_step, and copy its index to          ***/
/***       Index_destin, and the property is accessible by cur_step.Atoms[AtomIndex][Index_destin]  ***/
/***     IDMapping(vector<int>& Vector_destin, const STEP& cur_step):                               ***/
/***       map AtomID to AtomIndex for atoms in cur_step, and the mapping will be record in         ***/
/***       Vector_destin, so Vector_destin[AtomID] = AtomIndex                                      ***/
/***                                                                                                ***/
/*** (4) You can also call the following tool functions to do some simple calculation:              ***/
/***     CalcWrappedCoord(STEP &cur_step):                                                          ***/
/***       for all atoms in cur_step, change their coordinate into wrapped unscaled one             ***/
/***     CalcUnwrappedCoord(STEP &cur_step):                                                        ***/
/***       for all atoms in cur_step, change their coordinate into unwrapped unscaled one           ***/
/***                                                                                                ***/
/******************************************************************************************************/
/*** Major revision compared to previous version (X.X version):                                     ***/
/******************************************************************************************************/
/*** Version: 07/16/2016 (1.0 Version)  ***/
/*** By: Heyi Liang                     ***/
/******************************************/

#ifndef READDUMP_H
#define READDUMP_H

#define READDUMP_VERSION "1.0"
#include <cstdlib>
#include <cstdio>
#include <cmath>
#include <cstring>
#include "Container.h"

using namespace std;

class ReadDump
{
    private:
        /** variables assigned in constructor, record the brief information of the input file **/
        string InFileName;                                                  // record the name of input file
        vector<int> Timesteps;
        vector<long> TimestepsHeadPos;                                      // head position of each snapshot
        vector<string> Properties;                                          // record available atom properties from dump file
        int wrapped_flag;
        int scaled_flag;
        int ID,TYPE,MOL,X,Y,Z,IX,IY,IZ,VX,VY,VZ,WX,WY,WZ,FX,FY,FZ,Q;

        FILE* pFile;
        char* line;
        char* block;

        /** functions that are only called by constructor **/
        int CheckAndScanFile();                                             // read the file and get all the timesteps 
        int FindProperties();                                               // find the available atom properties
        int BasicPropertyMapping();

        /** functions that are only called when reading the file, they all called by function Read_Timestep or Read_Frame **/
        int ReadOneSnapshot(int Frame, long FilePos, STEP& step_destin);    // read information of one snapshot (the "Frame"th snapshot), from the file position at FilePos, and write the data to step_destin
            double StringToDouble(const char **p);                          // parse a string to double in a fast way, more efficient than atof and strtod

    public:
        ReadDump(string FileName);
        ~ReadDump();
        void print_version();

        /** public function that is used to read file **/
        int Read_Timestep(int Timestep, STEP& step_destin);                  // read one snapshot ( "Timestep" = timestep in simulation), and write data into step_destin
        int Read_Frame(int Frame, STEP& step_destin);                        // read one snapshot ( "Frame" = 0, 1, 2 ... total # of snapshots - 1), and write data into step_destin

        /** public functions that are used to get desired information **/
        int GetTimesteps(vector<int>& Vector_destin);
        int GetProperties(vector<string>& Vector_destin);
        int PropertyMapping(int& Index_destin, const string& PropertyName, const STEP& cur_step);        // map (property name (PropertyName) --> property index(Index_destin))
        int IDMapping(vector<int>& Vector_destin, const STEP& cur_step);

        /** public tool function **/
        int CalcWrappedCoord(STEP& cur_step);
        int CalcUnwrappedCoord(STEP& cur_step);

};

#endif // READDUMP_H
