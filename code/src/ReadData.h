/******************************************************************************************************/
/***This code is used to read one data file generated by lammps write_data command.********************/
/******************************************************************************************************/
/*** SPECIAL NOTE:                                                                                  ***/
/*** (1) This code is designed to read only ONE data file each time.                                ***/
/*** (2) It is assumed that the formats of different data files (if exist) are the same.            ***/
/*** (3) Current code only support following atom type: atomic, molecular, full.                    ***/
/******************************************************************************************************/
/***                                  HOW TO USE THIS CLASS                                         ***/
/*** To read a data file generated by lammps write_data command:                                    ***/
/***                                                                                                ***/
/*** (1) Claim an object of ReadData class. No parameter is needed.                                 ***/
/***                                                                                                ***/
/*** (2) Call the following functions to read one data file:                                        ***/
/***     Read_File(string FileName, STEP& step_destin, const char* atom_style):                     ***/
/***       Read one data file by file name (FileName) and write data into step_destin. You can      ***/
/***       specify atom style such as "molecular", or use an empty cstring "". When using an empty  ***/
/***       cstring, the Atoms section should follow the format "Atoms # atomtype", where atomtype   ***/
/***       is the atom type. Refer to LAMMPS manual for the format.                                 ***/
/***                                                                                                ***/
/*** (3) Call one of the following functions to get desired information:                            ***/
/***     PropertyMapping(int& Index_destin, const string& PropertyName, const STEP& cur_step):      ***/
/***       find the atom property whose name is PropertyName in cur_step, and copy its index to     ***/
/***       Index_destin, and the property is accessible by cur_step.Atoms[AtomIndex][Index_destin]  ***/
/***     AtomIDMapping(vector<int>& Vector_destin, const STEP& cur_step):                           ***/
/***       map AtomID to AtomIndex for atoms in cur_step, and the mapping will be record in         ***/
/***       Vector_destin, so Vector_destin[AtomID] = AtomIndex                                      ***/
/***     BondIDMapping(vector<int>& Vector_destin, const STEP& cur_step):                           ***/
/***       map BondID to BondIndex for bonds in cur_step, and the mapping will be record in         ***/
/***       Vector_destin, so Vector_destin[BondID] = BondIndex                                      ***/
/***                                                                                                ***/
/*** (4) You can also call the following tool functions to do some simple calculation:              ***/
/***     CalcWrappedCoord(STEP &cur_step):                                                          ***/
/***       for all atoms in cur_step, change their coordinate into wrapped unscaled one             ***/
/***     CalcUnwrappedCoord(STEP &cur_step):                                                        ***/
/***       for all atoms in cur_step, change their coordinate into unwrapped unscaled one           ***/
/***                                                                                                ***/
/******************************************************************************************************/
/*** Major revision:                                                                                ***/
/*** (1) Add: Read masses.                                                                          ***/
/******************************************************************************************************/
/*** Version: 11/12/2016 (1.1 Version)  ***/
/*** By: Heyi Liang                     ***/
/******************************************/

#ifndef READDATA_H
#define READDATA_H

#define READDATA_VERSION "1.1"
#include <cstdlib>
#include <cstdio>
#include <cmath>
#include <cstring>
#include "Container.h"

using namespace std;

class ReadData
{
    private:
        /** variables record the brief information of the input file **/
        FILE* pFile;
        long FilePosition;
        long massheadpos, masstailpos, atomheadpos, atomtailpos, velocityheadpos, velocitytailpos, bondheadpos, bondtailpos, angleheadpos, angletailpos, dihedralheadpos, dihedraltailpos, improperheadpos, impropertailpos;
        int massflag, atomflag, imageflag, velocityflag, bondflag, angleflag, dihedralflag, improperflag;
        int style;    // atom style

        char* line;
        char* block;

        /** functions that are only called when reading the file, they all called by function Read_File **/
        int Init();
        int ReadHeader(long &FilePos, STEP& step_destin);
        int FindSections(long &FilePos, STEP& step_destin);
        int ReadMasses(long &HeadPos, long &TailPos, STEP& step_destin);
        int ReadAtoms(long &HeadPos, long &TailPos, STEP& step_destin, const char* atom_style);
        int ReadVelocities(long &HeadPos, long &TailPos, STEP& step_destin);
        int ReadBonds(long &HeadPos, long &TailPos, STEP& step_destin);
        int ReadAngles(long &HeadPos, long &TailPos, STEP& step_destin);
        int ReadDihedrals(long &HeadPos, long &TailPos, STEP& step_destin);
        int ReadImpropers(long &HeadPos, long &TailPos, STEP& step_destin);

            void PrintTextNearWrongFormat(long FilePos);
            double StringToDouble(const char **p);                          // parse a cstring to double in a fast way, more efficient than atof and strtod
            int StringToInt(const char **p);                                // parse a cstring to int in a fast way, more efficient than atoi and strtol

    public:
        ReadData();
        ~ReadData();
        void print_version();

        /** public function that is used to read file **/
        int Read_File(string FileName, STEP& step_destin, const char* atom_style);                       // read one file by file name, and write data into step_destin

        /** public functions that are used to get desired information **/
        int PropertyMapping(int& Index_destin, const string& PropertyName, const STEP& cur_step);        // map (property name (PropertyName) --> property index(Index_destin))
        int AtomIDMapping(vector<int>& Vector_destin, const STEP& cur_step);
        int BondIDMapping(vector<int>& Vector_destin, const STEP& cur_step);


        /** public tool function **/
        int CalcWrappedCoord(STEP& cur_step);
        int CalcUnwrappedCoord(STEP& cur_step);

};

#endif // READDATA_H
